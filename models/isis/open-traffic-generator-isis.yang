module open-traffic-generator-isis {
  yang-version "1";

  namespace "http://gitub.com/open-traffic-generator/models-yang/models/isis";
  prefix "otg-isis";

  import open-traffic-generator-types {
    prefix "otg-types";
  }

  organization
    "OpenTrafficGenerator working group";

  contact
    "OpenTrafficGenerator working group
     opentrafficgenerator@googlegroups.com";

  description
    "This module defines telemetry that relOTGs to ISIS sessions that
    are controlled by an open traffic generator (OTG) whose definition
    is outside of the context of this module.";

  revision 2022-01-21 {
    description "Initial revision.";
    reference "0.1.0";
  }

  grouping isis-top {
    description
      "Top-level structural grouping for ISIS router telemetry
      entries.";

    container isis-routers {
      description
        "ISIS router telemetry collected by the OTG device.";

      list isis-router {
        key "name";

        config false;

        description
          "Each ISIS router is identified by an arbitrary string
          identifier.";

        leaf name {
          type leafref {
            path "../state/name";
          }
          description
            "Reference to the ISIS router's name, acting as a key of
            the ISIS router list.";
        }

        container state {
          description
            "Operational state of an individual ISIS router.";
          uses isis-state;
        }
      }
    }
  }

  grouping isis-state {
    description
      "Operational state of an individual ISIS router.";

    leaf name {
      type string;
      description
        "An arbitary name of the ISIS router determined by the OTG
        configuration.";
    }

    container counters {
      description
        "Level counters of the ISIS router.";

      uses isis-level-counters;
    }

    container link-state-databases {
      description
        "Link-State-Database.";

      uses lsp-states;
    }
  }

  grouping isis-level-counters {
    description
      "Operational level counters of the ISIS router.";

    container level1 {
      description
        "Level1 counters of the ISIS router.";
      uses isis-counters;
    }

    container level2 {
      description
        "Level2 counters of the ISIS router.";
      uses isis-counters;
    }
  }

  grouping lsp-states {
    description
      "This grouping defines ISIS LSP state information.";
    container lsp-states {
      description
        "Test.";
      list lsps {
        key "system-id lsp-index";
        description
          "The system ID of the router.";

        leaf system-id {
          type leafref {
            path "../state/system-id";
          }
          description
          "A reference to the Link State PDU ID.";
        }

        leaf lsp-index {
          type leafref {
            path "../state/lsp-index";
          }
          description
          "A reference to the Link State PDU ID.";
        }

        container state {
          description
            "State parameters of Link State PDU.";

          leaf system-id {
            type string;
            description
              "LSP ID of the LSP. The System ID for this emulated ISIS router, e.g. '640100010000'.";
          }

          leaf lsp-index{
            type uint32;

            description
              "Specifies the LSP index.";
          }

          leaf maximum-area-addresses {
            type uint8;
            description
              "Number of area addresses permitted for this ISs area. 0
              indicates the IS only supports three area addresses (by
              default). Any number inclusive of 1 and 254 indicates the
              number of areas allowed.";
          }

          leaf version {
            type uint8;
            default 1;
            description
              "PDU version. This is set to 1.";
          }


          leaf version2 {
            type uint8;
            default 1;
            description
              "PDU version2. This is set to 1";
          }


          leaf id-length {
            type uint8;
            description
              "Length of the ID field of NSAP addresses and NETs used in
              this routing domain.";
          }

          leaf pdu-type {
            type enumeration {
              enum LEVEL_1 {
                description "This enum describes ISIS level 1 PDU.";
              }
              enum LEVEL_2 {
                description "This enum describes ISIS level 2 PDU.";
              }
            }
            description
              "Link State PDU type.";
          }

          leaf remaining-lifetime {
            type uint16;
            units "seconds";
            description
              "Remaining lifetime in seconds before the LSP expiration.";
          }

          leaf sequence-number {
            type uint32;
            description
              "Sequence number of the LSP.";
          }

          leaf pdu-length {
            type uint16;
            description
              "Total length of the LSP.";
          }

          leaf-list flags {
            type enumeration {
              enum PARTITION_REPAIR {
                description
                  "When set, the originator supports partition
                  repair.";
              }
              enum ATTACHED_ERROR {
                description
                  "When set, the originator is attached to another
                  area using the referred metric.";
              }
              enum ATTACHED_EXPENSE {
                description
                  "When set, the originator is attached to another
                  area using the referred metric.";
              }
              enum ATTACHED_DELAY {
                description
                  "When set, the originator is attached to another
                  area using the referred metric.";
              }
              enum ATTACHED_DEFAULT {
                description
                  "When set, the originator is attached to another
                  area using the referred metric.";
              }
              enum OVERLOAD {
                description
                  "When set, the originator is overloaded, and must
                  be avoided in path calculation.";
              }
            }
            description
              "LSP Type-Block flags.";
          }

          leaf is-type {
            // type oc-isis-types:level-number; TODO
            type uint8;
            description
              "Type of neighboring system.";
          }
        }
        container tlvs {
          description
            "This container defines Link State PDU State TLVs.";

          list tlv {
            key "type";

            description
              "List of TLV types in the LSDB for the specified LSP.";

            leaf type {
              type leafref {
                path "../state/type";
              }
              description
                "Reference to the TLV's type.";
            }

            container state {
              config false;
              description
                "Operational state parameters relating to the specified
                LSP";

              uses isis-lsdb-tlv-type-state;
            }

            container area-address {
              description
                "This container defines TLV 1.";

              container state {
                description
                  "State parameters of ISIS TLV 1.";

                leaf-list address {
                  type string;
                  description
                    "Area adress(es) of the IS. Set of manual area
                    addresses of this IS.";
                reference
                  "ISO 10589 Intermediate System to Intermediate System
                  Intra- Domain Routeing Exchange Protocol for use in
                  Conjunction with the Protocol for Providing the
                  Connectionless-mode Network Service (ISO 8473 )
                  International Standard 10589: 2002, Second Edition,
                  2002. TLV 1.";
                }
              }
            }

            container hostname {
              description
                "This container defines TLV 137.";

              container state {
                description
                  "State parameters of ISIS TLV 137.";

                leaf-list hostname {
                  type string;
                  description
                    "Name of the node.";

                  reference
                    "RFC6233: IS-IS Registry Extension for Purges, RFC
                    5301: Dynamic Hostname Exchange Mechanism for IS-IS.
                    TLV 137";
                }
              }
            }
            container ipv4-interface-address {
              description
                "This container defines sub-TLV 6.";

              container state {
                description
                  "State parameters of sub-TLV 6.";

                leaf-list address {
                  type otg-types:ipv4-address;
                  description
                    "A 4-octet IPv4 address for the interface described by
                    the (main) TLV. This sub-TLV can occur multiple
                    times.";
                  reference
                    "RFC5305: IS-IS Extensions for Traffic Engineering.
                    sub-TLV 6: TLV 22,23,41,222,223.";
                }
              }
            }
          }

          container ipv4-neighbor-address {
            description
              "This container defines sub-TLV 8.";

            container state {
              description
                "State parameters of sub-TLV 8.";

              leaf-list address {
                type otg-types:ipv4-address;
                description
                  "A single IPv4 address for a neighboring router on
                  this link. This sub-TLV can occur multiple times.";
                reference
                  "RFC5305: IS-IS Extensions for Traffic Engineering.
                  sub-TLV 8: TLV 22,23, 141,222,223.";
              }
            }
          }

          container ipv6-interface-address {
            description
              "This container defines sub-TLV 12.";

            container state {
              description
                "State parameters of sub-TLV 12.";

              leaf-list address {
                type otg-types:ipv6-address;
                description
                  "Contains a 16-octet IPv6 address for the interface
                  described by the containing  Extended IS Reachability
                  TLV. This sub-TLV can occur multiple times.";
                reference
                  "RFC6119: IPv6 Traffic Engineering in IS-IS. sub-TLV
                  12: TLV 22,23,141,222,223.";
              }
            }
          }

          container ipv6-neighbor-address {
            description
              "This container defines sub-TLV 13.";

            container state {
              description
                "State parameters of sub-TLV 13.";

              leaf-list address {
                type otg-types:ipv6-address;
                description
                  "Contains a 16-octet IPv6 address for a neighboring
                  router on the link described by the (main) TLV. This
                  sub-TLV can occur multiple times.";
                reference
                  "RFC6119: IPv6 Traffic Engineering in IS-IS. sub-TLV
                  13: ISIS TLV 22,23,141,222,223.";
              }
            }
          }

          container ipv4-te-router-id {
            description
              "This container defines TLV 134.";

            container state {
              description
                "State parameters of ISIS TLV 134.";

              leaf-list router-id {
                type otg-types:ipv4-address;
                description
                  "IPv4 Traffic Engineering router ID of the node. For
                  traffic engineering, it guarantees that we have a
                  single stable address that can always be referenced in
                  a path that will be reachable from multiple hops away,
                  regardless of the state of the node's interfaces.";
              reference
                "RFC5305: IS-IS Extensions for Traffic Engineering. TLV
                134.";
              }
            }
          }

          container is-reachability {
            description
              "This container describes list of ISIS neighbors and
              attributes.";

            reference
              "ISO 10589, Intermediate System to Intermediate System
              Intra- Domain Routeing Exchange Protocol for use in
              Conjunction with the Protocol for Providing the
              Connectionless-mode Network Service (ISO 8473),
              International Standard 10589: 2002, Second Edition,
              2002. TLV 2.";

            container neighbors {
              description
                "This container describes IS neighbors.";

              list neighbor {
                key "system-id";
                description
                  "IS reachability neighbor attributes.";

                leaf system-id {
                  type leafref {
                    path "../state/system-id";
                  }
                  description
                    "Reference to the system ID of the neighbor.";
                }

                uses isis-lsdb-neighbor;
              }
            }
          }


          container ipv4-internal-reachability {
            description
              "This container defines list of IPv4 internal reachability
              information.";

            reference
              "RFC1195: OSI ISIS for IP and Dual Environments. RFC5302:
              Domain-Wide Prefix Distribution with Two-Level IS-IS. TLV
              128";

            container prefixes {
              description
                "This container describes IS prefixes.";

              list prefix {
                key "prefix";

                description
                  "IPv4 prefixes and internal reachability attributes.";

                leaf prefix {
                  type leafref {
                    path "../state/prefix";
                  }
                  description
                    "Reference to the IPv4 prefix";
                }

                uses ipv4-prefix-attributes-state;
              }
            }
          }

          container ipv4-external-reachability {
            description
            "This container defines list of IPv4 external reachability
              information.";

            reference
              "RFC1195: OSI ISIS for IP and Dual Environments.  RFC5302:
              Domain-Wide Prefix Distribution with Two-Level IS-IS. TLV
              130";

            container prefixes {
              description
                "This container describes IS neighbors.";

              list prefix {
                key "prefix";

                description
                  "IPv4 external prefixes and reachability attributes.";

                leaf prefix {
                  type leafref {
                    path "../state/prefix";
                  }
                  description
                    "Reference to the IPv4 prefix.";
                }

                uses ipv4-prefix-attributes-state;
              }
            }
          }

          container extended-is-reachability {
            description
              "This container defines list of ISIS extended reachability
              neighbors.";

            reference
              "RFC5305: IS-IS Extensions for Traffic Engineering. TLV
              22.";

            uses isis-lsdb-common-extisreach-neighbors;
          }

          container extended-ipv4-reachability {
            description
              "This container defines list of IPv4 extended reachability
              information.";

            reference
              "RFC5305: IS-IS Extensions for Traffic Engineering. TLV
              135";

            container prefixes {
              description
                "This container describes IS prefixes.";

              list prefix {
                key "prefix";

                description
                  "This list describes IPv4 extended prefixes and
                  attributes.";

                leaf prefix {
                  type leafref {
                    path "../state/prefix";
                  }
                  description
                    "Reference to the IPv4 prefix that the TLV describes
                    the attributes of.";
                }

                uses ipv4-prefix-extended-state;
              }
            }
          }

          container ipv6-reachability {
            description
              "This container defines list of IPv6 reachability
              information.";

            reference
              "RFC5308: Routing IPv6 with IS-IS. TLV 236";

            container prefixes {
              description
                "This container describes IS prefixes.";

              list prefix {
                key "prefix";

                description
                  "This list defines IPv6 extended prefix attributes.";

                leaf prefix {
                  type leafref {
                    path "../state/prefix";
                  }
                  description
                    "Reference to the IPv6 prefix that the TLV
                    corresponds to.";
                }

                uses ipv6-prefix-extended-state;
              }
            }
          }

          container multi-topology {
            description
              "This container defines the topology supported.";

            reference
              "RFC5120: M-ISIS: Multi Topology (MT) Routing in
              Intermediate System to Intermediate Systems (IS-ISs). TLV
              229";

            container topologies {
              description
                "This container describes IS topologies.";

              list topology {
                key "mt-id";

                description
                  "This list describes a topology.";

                leaf mt-id {
                  type leafref {
                    path "../state/mt-id";
                  }
                  description
                    "Reference to the multi-topology ID being described
                    by the list entry.";
                }

                container state {
                  description
                    "State parameters of IS multi-topology TLV 229.";

                  leaf mt-id {
                    type uint16 {
                      range "0 .. 4095";
                    }
                    description
                      "Multi-topology ID.";
                  }

                  leaf attributes {
                    type enumeration {
                      enum OVERLOAD {
                        description
                          "When set, node is overloaded, still part of
                          the topology but cannot be used for transit.";
                      }
                      enum ATTACHED {
                        description
                          "When set, node is attached to another area
                          using the referred metric and can be used as
                          default gateway.";
                      }
                    }
                    description
                      "Attributes of the LSP for the associated
                      topology.";
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  grouping isis-lsdb-neighbor {
    description
      "This grouping defines attributes of an ISIS standard
      neighbor.";

    container state {
      description
        "State parameters of IS standard neighbor.";

      leaf system-id {
        type string;
        description
          "System-ID of IS neighbor.";
      }
    }

    uses isis-lsdb-common-metric-specification;

  }

  grouping isis-lsdb-common-metric-specification {
    description
      "Common definitions of the metric in IS-IS.";

    container default-metric {
      description
        "This container defines ISIS Default Metric.";

      container state {
        description
          "State parameters for default-metric.";

        leaf flags {
          type enumeration {
            enum INTERNAL {
              description
                "When set to zero, indicates internal metrics.";
            }
          }
          description
            "ISIS Default-Metric Flags.";
        }

        leaf metric {
          type uint32;
          description
            "ISIS default metric value. This is a metric understood by
            every Intermediate system in the domain. Each circuit
            shall have a positive  integral value assigned for this
            metric. The value may be associated with any  objective
            function of the circuit, but by convention is intended to
            measure the capacity of the circuit for handling traffic,
            for example, its throughput in  bits-per-second. Higher
            values indicate a lower capacity.";
        }
      }
    }
  }

  grouping ipv4-prefix-attributes-state {
   description
     "This group defines attributes of an IPv4 standard prefix.";

    container state {
     description
       "State parameters of IPv4 standard prefix.";

      leaf up-down {
        type boolean;
        description
          "The up/down bit. Set if a prefix is advertised from a
          higher level to a lower level (e.g., level 2 to level 1),
          indicating that the prefix has traveled down the hierarchy.
          Prefixes that have the up/down bit set may only be
          advertised down the hierarchy, i.e., to lower levels. When a
          prefix is first injected into IS-IS, the bit is UNSET.";
      }

      leaf prefix {
        type otg-types:ipv4-address;
        description
          "IPv4 prefix contained within reachability TLVs.";
      }
    }

    uses isis-lsdb-common-metric-specification;

    /*
    container level1-lsps {
      description
        "Level1 counters of the ISIS router.";
    */
    /*
    list level1-lsps {
      key "lsp-id";
      description
        "List of LSP.";
      leaf lsp-id {
        type leafref {
          path "../lsp/lsp-id";
        }
        description
          "Reference to lsp-id";
      }
      container lsp {
        description
          "State of an individual LSP.";

        leaf lsp-id {
          type otg-types:counter64;
          description
            "LSP-ID";
        }
        uses isis-lsp;
      }
    }
    */
    /*
    container level2-lsps {
      description
        "Level2 counters of the ISIS router.";
      list lsps {
        key "lsp-id";

        description
          "List of LSP.";
        leaf lsp-id {
          type leafref {
            path "../../state/lsp-id";
          }
          description
          "Reference to lsp-id";
        }
      }
      container state {
        description
          "State of an individual LSP.";
        leaf lsp-id {
          type uint32;

          description
            "LSP-ID";
        }
        uses isis-lsp;
      }
    }
    */
    /*
    list level2-lsps {
      key "lsp-id";
      description
        "List of LSP.";
      leaf lsp-id {
        type leafref {
          path "../lsp/lsp-id";
        }
        description
          "Reference to lsp-id";
      }
      container lsp {
        description
          "State of an individual LSP.";

        leaf lsp-id {
          type otg-types:counter64;
          description
            "LSP-ID";
        }
        uses isis-lsp;
      }
    }
    */
  }

  grouping isis-counters {
    description
      "Level counters of the ISIS router.";

    leaf sessions-up {
      type otg-types:counter64;
      description
        "The total number of sessions that are fully up.";
    }

    leaf sessions-flap {
      type otg-types:counter64;
      description
        "The total number of sessions flap.";
    }

    leaf database-size {
      type otg-types:counter64;
      description
        "The total number of link stOTG updOTGs (LSPs) in the LSP
        databases.";
    }

    leaf out-bcast-hellos {
      type otg-types:counter64;
      description
        "The total number of broadcast HELLO messages sent.";
    }

    leaf in-bcast-hellos {
      type otg-types:counter64;
      description
        "The total number of broacast HELLO messages received.";
    }

    leaf out-p2p-hellos {
      type otg-types:counter64;
      description
        "The total number of point to point (P2P) HELLO messages
        sent.";
    }

    leaf in-p2p-hellos {
      type otg-types:counter64;
      description
        "The total number of point to point (P2P) HELLO messages
        received.";
    }

    leaf out-psnp {
      type otg-types:counter64;
      description
        "The total number of partial sequence number packet (PSNPs)
        messages sent.";
    }

    leaf in-psnp {
      type otg-types:counter64;
      description
        "The total number of partial sequence number packet (PSNPs)
        messages received.";
    }

    leaf out-csnp {
      type otg-types:counter64;
      description
        "The total number of complete sequence number packet (CSNPs)
        messages sent.";
    }

    leaf in-csnp {
      type otg-types:counter64;
      description
        "The total number of complete sequence number packet (CSNPs)
        messages received.";
    }

    leaf out-lsp {
      type otg-types:counter64;
      description
        "The total number of link stOTG protocol data units (LSPs)
        sent.";
    }

    leaf in-lsp {
      type otg-types:counter64;
      description
        "The total number of link stOTG protocol data units (LSPs)
        received.";
    }
  }
  /*
  grouping isis-lsp {
    description
      "lsp grouping";
    container tlvs {
      description
        "State of an individual LSP.";
      uses is-reachability;
    }
  }

  grouping is-reachability {
    descriptionis-reachability
      "Type-Length-Value (TLV)";
    leaf length {
      type uint16;
      description "TLV length (octets).";
    }
    leaf value {
      type uint16;
      description "TLV value.";
    }
  }
  */
  grouping isis-lsdb-tlv-type-state {
    description
      "Per-subTLV type operational state parameters for ISIS.";

    leaf type {
      type uint8;
      description
        "The type of TLV being described. The type of TLV is
        expressed as a canonical name.";
    }
  }

  grouping isis-lsdb-common-extisreach-neighbors {
    description
      "Common structure for the Extended IS Reachability and IS
      Reachability Neighbour attributes.";

    container neighbors {
      description
        "This container describes IS neighbors.";

      list neighbor {
        key "system-id";
        description
          "This list describes ISIS extended neighbors and
          reachability attributes.";

        leaf system-id {
          type leafref {
            path "../state/system-id";
          }
          description
            "Reference to the neighboring system's system ID.";
        }

        container state {
          description
            "State parameters corresponding to the extended
            neighbour.";

          leaf system-id {
            type string;
            description
              "System-id of the neighbor.";
          }
        }

        container instances {
          description
            "This list contains all instances of an adjacency
            between the originating IS and the remote IS.
            Multiple instances are used where there are
            parallel adjacencies between two systems.";

          list instance {
            key "id";

            description
              "Instance of the TLV to the remote IS neighbor.";

            leaf id {
              type leafref {
                path "../state/id";
              }
              description
                "Reference to the unique identifier for
                the instance of the extended IS
                reachability sub-TLV.";
            }

            container state {
              description
                "State parameters of extended neighbor";

              leaf id {
                type uint64;
                description
                  "Unique identifier for the instance of the
                  TLV for the IS neighbor. The instance
                  ID is not required to be consistent across
                  across readvertisements of the LSP.";
              }

              leaf metric {
                type uint32;
                description
                  "Metric value.";
              }
            }
            uses is-reachability-neighbor-state;
          }
        }
      }
    }
  }

  grouping is-reachability-neighbor-state {
    description
      "This grouping defines is-reachability neighbor.";

    container subtlvs {
      description
        "This container describes IS Neighbor sub-TLVs.";

      list subtlv {
        key "type";

        description
          "List of subTLV types in the LSDB for the specified TLV.";

        leaf type {
          type leafref {
            path "../state/type";
          }
          description
            "Reference to the sub-TLV type.";
        }

        container state {
          description
            "State parameters of IS neighbor state";

          uses isis-lsdb-subtlv-type-state;
        }

        container admin-group {
          description
            "This container defines sub-TLV 3.";

          container state {
            description
              "State parameters of sub-TLV 3.";

            leaf-list admin-group {
              type uint32;
              description
                "The administrative group sub-TLV contains a 4-octet
                bit mask assigned by the network administrator.  Each
                set bit corresponds to one administrative group
                assigned to the interface. By convention, the least
                significant bit is referred to as group 0, and the
                most significant bit is referred to as group 31.";
              reference
                "RFC5305: IS-IS Extensions for Traffic Engineering.
                sub-TLV 3: TLV 22,23,141,222, 223.";
            }
          }
        }

        container ipv4-interface-address {
          description
            "This container defines sub-TLV 6.";

          container state {
            description
              "State parameters of sub-TLV 6.";

            leaf-list address {
              type otg-types:ipv4-address;
              description
                "A 4-octet IPv4 address for the interface described by
                the (main) TLV. This sub-TLV can occur multiple
                times.";
              reference
                "RFC5305: IS-IS Extensions for Traffic Engineering.
                sub-TLV 6: TLV 22,23,41,222,223.";
            }
          }
        }

        container ipv4-neighbor-address {
          description
            "This container defines sub-TLV 8.";

          container state {
            description
              "State parameters of sub-TLV 8.";

            leaf-list address {
              type otg-types:ipv4-address;
              description
                "A single IPv4 address for a neighboring router on
                this link. This sub-TLV can occur multiple times.";
              reference
                "RFC5305: IS-IS Extensions for Traffic Engineering.
                sub-TLV 8: TLV 22,23, 141,222,223.";
            }
          }
        }

        container max-link-bandwidth {
          description
            "This container defines sub-TLV 9.";

          container state {
            description
              "State parameters of sub-TLV 9.";

            leaf bandwidth {
              type otg-types:ieeefloat32;
              units "bytes per second";
              description
                "The maximum bandwidth that can be used on this link
                in this direction (from the system originating the LSP
                to its neighbors).  It is encoded in 32 bits in IEEE
                floating point format.  The units are bytes (not
                bits!) per second.";
              reference
                "RFC5305: IS-IS Extensions for Traffic Engineering.
                sub-TLV 9: TLV 22,23,141,222,223.";
            }
          }
        }

        container max-reservable-link-bandwidth {
          description
            "This container defines sub-TLV 10.";

          container state {
            description
              "State parameters of sub-TLV 10.";

            leaf bandwidth {
              type otg-types:ieeefloat32;
              units "bytes per second";
              description
                "The maximum amount of bandwidth that can be reserved
                in this direction on this link.  Note that for
                oversubscription purposes,  this can be greater than
                the bandwidth of the link. It is encoded  in 32 bits
                in IEEE floating point format.  The units are bytes
                (not bits!) per second.";
              reference
                "RFC5305: IS-IS Extensions for Traffic Engineering.
                Sub-TLV 10: TLV 22,23,141,222,223.";
            }
          }
        }

        container unreserved-bandwidth {
          description
            "This container defines unreserved-bandwidth. The units
            are bytes per second.";

          reference
            "RFC5305: IS-IS Extensions for Traffic Engineering. sub-
            TLV 11: TLV 22,23,141,222,223";

          list setup-priority {
            key "priority";

            leaf priority {
              type leafref {
                path "../state/priority";
              }
              description
                "Reference to the setup priority to which the
                unreserved bandwidth corresponds.";
            }

            description
              "Setup priority (0 through 7) for unreserved
              bandwidth.";

            container state {
              description
                "State parameters of IS Extended Reachability sub-TLV
                11.";

              leaf priority {
                type uint8 {
                  range "0..7";
                }
                description
                  "Setup priority level of 0 through 7 to be used by
                  Unreserved Bandwidth sub-TLV 11.";
              }

              leaf bandwidth {
                type otg-types:ieeefloat32;
                units "bytes per second";
                description
                  "The amount of bandwidth reservable in this
                  direction on this link. Note that for
                  oversubscription purposes, this can be greater than
                  the bandwidth of the link. It contains eight 32-bit
                  IEEE floating point numbers(one for each priority).
                  The units are bytes (not bits!) per second. The
                  values correspond to the bandwidth that can be
                  reserved with a setup priority of 0 through 7,
                  arranged in increasing order with priority 0
                  occurring at the start of the sub-TLV, and priority
                  7 at the end of the sub-TLV.";
              }
            }
          }
        }

        container ipv6-interface-address {
          description
            "This container defines sub-TLV 12.";

          container state {
            description
              "State parameters of sub-TLV 12.";

            leaf-list address {
              type otg-types:ipv6-address;
              description
                "Contains a 16-octet IPv6 address for the interface
                described by the containing  Extended IS Reachability
                TLV. This sub-TLV can occur multiple times.";
              reference
                "RFC6119: IPv6 Traffic Engineering in IS-IS. sub-TLV
                12: TLV 22,23,141,222,223.";
            }
          }
        }

        container ipv6-neighbor-address {
          description
            "This container defines sub-TLV 13.";

          container state {
            description
              "State parameters of sub-TLV 13.";

            leaf-list address {
              type otg-types:ipv6-address;
              description
                "Contains a 16-octet IPv6 address for a neighboring
                router on the link described by the (main) TLV. This
                sub-TLV can occur multiple times.";
              reference
                "RFC6119: IPv6 Traffic Engineering in IS-IS. sub-TLV
                13: ISIS TLV 22,23,141,222,223.";
            }
          }
        }

        container te-default-metric {
          description
            "This container defines sub-TLV 18.";
          container state {
            description
              "State parameters of sub-TLV 18.";

            leaf metric {
              type uint32;
              description
                "This metric is administratively assigned and can be
                used to present a differently weighted topology to
                traffic engineering SPF calculations. To preclude
                overflow within a traffic engineering SPF
                implementation, all metrics greater than or equal to
                MAX_PATH_METRIC SHALL be considered to have a metric
                of MAX_PATH_METRIC.";
              reference
                "RFC5305: IS-IS Extensions for Traffic Engineering.
                sub-TLV 18: TLV 22,23,141,222,223.";
            }
          }
        }


        container link-protection-type {
          description
            "ISIS LSDB parameters relating to the type of link
            protection offered.";

          container state {
            description
              "State parameters of sub-TLV 20.";

            leaf-list type {
              type enumeration {
                enum EXTRA_TRAFFIC {
                  description
                    "If set the link has extra traffic protection. If
                    the link is of type Extra Traffic, it means that
                    the link is protecting another link or links. The
                    LSPs on a link of this type will be lost if any of
                    the links it is protecting fail.";
                }
                enum UNPROTECTED {
                  description
                    "If set, the link is unprotected. If the link is
                    of type Unprotected, it means that there is no
                    other link protecting this link.  The LSPs on a
                    link of this type will be lost if the link
                    fails.";
                }
                enum SHARED {
                  description
                    "If set, the link has shared protection. If the
                    link is of type Shared, it means that there are
                    one or more disjoint links of type Extra Traffic
                    that are protecting this link.  These Extra
                    Traffic links are shared between one or more links
                    of type Shared.";
                }
                enum ONE_ONE {
                  description
                    "If set, the link has dedicated 1:1 protection. If
                    the link is of type Dedicated 1:1, it means that
                    there is one dedicated disjoint link of type Extra
                    Traffic that is protecting this link.";
                }
                enum PLUS_ONE {
                  description
                    "If set, the link has dedicated 1+1 protection. If
                    the link is of type Dedicated 1+1, it means that a
                    dedicated disjoint link is protecting this link.
                    However, the protecting link is not advertised in
                    the link state database and is therefore not
                    available for the routing of LSPs.";
                }
                enum ENHANCED {
                  description
                    "If set the link has enhanced protection.  If the
                    link is of type Enhanced, it means that a
                    protection scheme that is more reliable than
                    Dedicated 1+1, e.g., 4 fiber BLSR/MS-SPRING, is
                    being used to protect this link.";
                }
              }
              description
                "Link protection capabilities.";
              reference
                "RFC5307: IS-IS Extensions in Support of Generalized
                Multi-Protocol  Label Switching (GMPLS). sub-TLV 20:
                TLV 22,23,141,222,223.";
            }
          }
        }
      }
    }
  }

  grouping isis-lsdb-subtlv-type-state {
    description
      "Per-subTLV type operational state parameters for ISIS.";

    leaf type {
      type uint8;
      description
        "The type of subTLV being described. The type of subTLV is
        expressed as a canonical name.";
    }
  }

  grouping ipv4-prefix-extended-state {
    description
      "This grouping defines attributes of an IPv4 extended prefix.";

    container state {
      description
        "State parameters of an IPv4 extended prefix.";
      uses ipv4-prefix-extended-params-state;
    }

    uses isis-lsdb-prefix-state;
  }

  grouping ipv4-mt-prefix-extended-state {
    description
      "State parameters that relate to an IPv4 prefix in a
      multi-topology context.";

    container state {
      description
        "State parameters of an IPv4 extended prefix.";
      uses ipv4-prefix-extended-params-state;
      uses isis-lsdb-common-mt-id;
    }

    uses isis-lsdb-prefix-state;
  }

  grouping ipv4-prefix-extended-params-state {
    description
      "State parameters that relate to an IPv4 prefix";

    leaf up-down {
      type boolean;
      description
        "The up/down bit. Set if a prefix is advertised from a
        higher level to a lower level (e.g., level 2 to level 1),
        indicating that the prefix has traveled down the hierarchy.
        Prefixes that have the up/down bit set may only be
        advertised down the hierarchy, i.e., to lower levels. When a
        prefix is first injected into IS-IS, the bit is UNSET.";
    }

    leaf s-bit {
      type boolean;
      description
        "The Sub-TLV present bit. If UNSET, the octets of Sub-TLVs
        are not present. Otherwise, the bit is set and the octet
        following the prefix will contain the length of the Sub-TLV
        portion of the structure.";
    }

    leaf prefix {
      type otg-types:ipv4-address;
      description
        "IPv4 prefix contained within extended reachability TLVs.";
    }

    leaf metric {
      type uint32;
      description
        "ISIS metric value.";
    }
  }

  grouping isis-lsdb-common-mt-id {
    description
      "Common definition of the multi-topology ID";

    leaf mt-id {
      type uint16 {
        range "0..4095";
      }
      description
        "Multi-topology ID";
    }
  }
  grouping ipv6-prefix-extended-state {
    description
      "State parameters relating to an IPv6 prefix.";

    container state {
      description
        "State parameters of IPv6 prefix attributes";

      uses ipv6-prefix-extended-params-state;
    }

    uses isis-lsdb-prefix-state;
  }

  grouping ipv6-mt-prefix-extended-state {
    description
      "State parameters relating to a multi-topology IPv6
      prefix.";

    container state {
      description
        "State parameters relating an IPv6 prefix attribute";
      uses ipv6-prefix-extended-params-state;
      uses isis-lsdb-common-mt-id;
    }

    uses isis-lsdb-prefix-state;
  }

  grouping ipv6-prefix-extended-params-state {
    description
      "Common parameters of an IPv6 extended prefix.";

    leaf up-down {
      type boolean;
      description
        "The up/down bit. Set if a prefix is advertised from a
        higher level to a lower level (e.g., level 2 to level 1),
        indicating that the prefix has traveled down the hierarchy.
        Prefixes that have the up/down bit set may only be
        advertised down the hierarchy, i.e., to lower levels. When a
        prefix is first injected into IS-IS, the bit is UNSET.";
    }

    leaf x-bit {
      type boolean;
      description
        "The external bit. Set when the prefix was distributed into
        IS-IS from another routing protocol.";
    }

    leaf s-bit {
      type boolean;
      description
        "The sub-tlv present bit. If UNSET, the octets of Sub-TLVs
         are not present. Otherwise, the bit is set and the octet
         following the prefix will contain the length of the Sub-TLV
         portion of the structure.";
    }

    leaf prefix {
      type otg-types:ipv6-address;
      description
        "IPv6 prefix contained within extended reachability TLVs.";
    }

    leaf metric {
      type uint32;
      description
        "ISIS metric value.";
    }
  }

  grouping isis-lsdb-prefix-state {
    description
      "This grouping defines prefix reachability.";

     container subtlvs {
      description
        "This container describes IS prefix sub-TLVs.";

      list subtlv {
        key "type";

        description
          "List of subTLV types in the LSDB for the specified TLV.";

        leaf type {
          type leafref {
            path "../state/type";
          }
          description
            "Reference to the sub-TLV type";
        }

        container state {
          description
            "State parameters for a prefix.";

          uses isis-lsdb-subtlv-type-state;
        }
      container flags {
        description
          "This container defines sub-TLV 4.";

        container state {
          description
            "State parameters of sub-TLV 4.";

          uses isis-lsdb-subtlv-type-state;

          leaf-list flags {
            type enumeration {
              enum EXTERNAL_FLAG {
                description
                  "External prefix flag. Set if the prefix has been
                  redistributed from another protocol. This includes
                  the case where multiple virtual routers are
                  supported and the source of the redistributed prefix
                  is another IS-IS instance.";
              }
              enum READVERTISEMENT_FLAG {
                description
                  "Readvertisement flag. Set when the prefix has been
                  leaked from one level to another (upwards or
                  downwards).";
              }
              enum NODE_FLAG {
                description
                  "Node flag. Set when the prefix identifies the
                  advertising router, i.e., the prefix is a host
                  prefix advertising  a globally reachable address
                  typically associated with a loopback address.";
              }
            }
            description
              "Additional prefix reachability flags.";

            reference
              "RFC7794: IS-IS Prefix Attributes for Extended IPv4 and
              IPv6 Reachability. sub-TLV 4.";
            }
          }
        }
      }
    }
  }
  uses isis-top;
}
