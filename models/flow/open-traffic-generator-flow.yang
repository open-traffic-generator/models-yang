module open-traffic-generator-flow {
  yang-version "1";

  namespace "http://github.com/open-traffic-generator/models/yang/models/flow";
  prefix "otg-flow";

  import open-traffic-generator-types {
    prefix "otg-types";
  }

  organization
    "OpenTrafficGenerator working group";

  contact
    "OpenTrafficGenerator working group
     opentrafficgenerator@googlegroups.com";

  description
    "This module defines telemetry that refers to dataplane flows that
    are controlled by an open traffic generator (OTG) whose definition
    is outside of the context of this module.";

  revision 2022-01-21 {
    description "Initial revision.";
    reference "0.1.0";
  }

  grouping flow-top {
    description
      "Top-level structural grouping for flow entries.";

    container flows {
      description
        "Flow statistics collected by the network device.
        A flow is defined to be an arbitrary stream of packets whose
        definition is outside of the context of the module.";

      list flow {
        key "name";

        config false;

        description
          "A flow of packets between one or more internal and external sources
          and one or more internal and external destinations that the target
          is able to track and report statistics on. Each flow is identified by
          an arbitrary string identifier.";

        leaf name {
          type leafref {
            path "../state/name";
          }
          description
            "Reference to the flow's name, acting as a key of the
            flow list.";
        }

        container state {
          config false;

          description
            "Operational state of the individual flow.";

          uses flow-state;

          container counters {
            description
              "Counters that correspond to the individual flow.";

            uses flow-counters;
          }
        }

        uses flow-metric-tags;
      }
    }
  }

  grouping flow-state {
    description
      "Operational state of the individual flow.";

    leaf name {
      type string;
      description
        "An arbitrary name used for the flow tracked by the system. This
        name must be unique for the flows tracked and exported by the target.";
    }

    leaf transmit {
      type boolean;
      description
        "Whether or not the flow is transmitting";
    }

    leaf loss-pct {
      type otg-types:ieeefloat32;
      description
        "The percentage of transmitted packets that were not received by the
        destinations of the flow.";
    }

    leaf out-frame-rate {
      type otg-types:ieeefloat32;
      description
        "The rate, measured in frames per second, at which frames are being
        transmitted for the flow.";
    }

    leaf in-frame-rate {
      type otg-types:ieeefloat32;
      description
        "The rate, measured in frames per second, at which frames are being
        received for the flow.";
    }

    leaf out-rate {
      type otg-types:ieeefloat32;
      description
        "The rate, measured in bits per second, at which the flow is being
        transmitted.";
    }

    leaf in-rate {
      type otg-types:ieeefloat32;
      description
        "The rate, measured in bits per second, at which the flow is being
        received.";
    }
  }

  grouping flow-counters {
    description
      "Counters that correspond to an individual flow.";

    leaf in-octets {
      type otg-types:counter64;
      description
        "The total number of bytes received by the target for the flow.";
    }

    leaf in-pkts {
      type otg-types:counter64;
      description
        "The total number of packets received by the target for the flow.";
    }

    leaf out-octets {
      type otg-types:counter64;
      description
        "The total number of bytes sent by the target for the flow. These
        packets may be generated or forwarded by the target.";
    }

    leaf out-pkts {
      type otg-types:counter64;
      description
        "The total number of packets sent by the target for the flow. These
        packets may be generated or forwarded by the target.";
    }
  }

  grouping flow-metric-tags {
    description
      "Structural grouping for flow-metric-tags information";

    container flow-metric-tags {
      description
        "Container of flow-metric-tags information";

      list flow-metric-tag {
        key "name-value-request";

        description
          "A list of flow-metric-tag which represent one or more metric tags (request)
              to disaggregate flow metrics and associated disaggregated flow metrics (response).
              Each flow-metric-tag is identified by a name-value-request.";

        leaf name-value-request {
          type leafref {
            path "../state/name-value-request";
          }
          description
            "Reference to a name-value-request, acting as
            a key to the flow-metric-tag list.";
        }

        container state {
          description
            "Operational state of the individual flow-metric-tag.";

          leaf name-value-request {
            type string;
            description
              "Encoded string representing one or more metric tag name and corresponding filter value
              used as request to disaggregate the flow metrics.
              Encoding format:
                  tag_name=value&tag_name=value
                  name can be specified multiple times.
                  value is optional, need to be supplied only for retrieving subset of disaggregated flow metrics
                  matching with the tag name and value.
              Example:
                  ipv4_src&vlan_id
                  ipv4_src=0x11&vlan_id=0x01
                  ipv4_src=0x11&ipv4_src=0x12&vlan_id=0x01";
          }

          list metric {
            key "name-value-response";

            description
              "A list of disaggregated flow metric, based on metric tags & values specified in name-value-request.
              Each disaggregated flow metric is identified by a name-value-response";

            leaf name-value-response {
              type leafref {
                path "../state/name-value-response";
              }
              description
                "Reference to a name-value-response, acting as
                a key of the metric list.";
            }

            container state {
              description
                "Operational state of the individual metric.";

              leaf name-value-response {
                type string;
                description
                  "Encoded string represents one or more metric tag name and corresponding tag value,
                  to identify each disaggregated flow.
                  Encoding format:
                      tag_name=value&tag_name=value
                  Example:
                      ipv4_src=0x11
                      ipv4_src=0x11&vlan_id=0x01
                      ipv4_src=0x12&vlan_id=0x01";
              }

              container counters {
                description
                  "Counters that correspond to the disaggregated flow metrics associated
                  with a name-value-response as identifier of that disaggregated flow.";

                uses flow-counters;
              }
            }
          }
        }
      }
    }
  }

  uses flow-top;
}
