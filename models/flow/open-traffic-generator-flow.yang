module open-traffic-generator-flow {
  yang-version "1";

  namespace "http://github.com/open-traffic-generator/models/yang/models/flow";
  prefix "otg-flow";

  import open-traffic-generator-types {
    prefix "otg-types";
  }

  organization
    "OpenTrafficGenerator working group";

  contact
    "OpenTrafficGenerator working group
     opentrafficgenerator@googlegroups.com";

  description
    "This module defines telemetry that refers to dataplane flows that
    are controlled by an open traffic generator (OTG) whose definition
    is outside of the context of this module.";

  revision 2022-01-21 {
    description "Initial revision.";
    reference "0.1.0";
  }

  grouping flow-top {
    description
      "Top-level structural grouping for flow entries.";

    container flows {
      description
        "Flow statistics collected by the network device.
        A flow is defined to be an arbitrary stream of packets whose
        definition is outside of the context of the module.";

      list flow {
        key "name";

        config false;

        description
          "A flow of packets between one or more internal and external sources
          and one or more internal and external destinations that the target
          is able to track and report statistics on. Each flow is identified by
          an arbitrary string identifier.";

        leaf name {
          type leafref {
            path "../state/name";
          }
          description
            "Reference to the flow's name, acting as a key of the
            flow list.";
        }

        container state {
          config false;

          description
            "Operational state of the individual flow.";

          uses flow-state;

          container counters {
            description
              "Counters that correspond to the individual flow.";

            uses flow-counters;
          }
        }

        uses tag-metrics;
      }
    }
  }

  grouping flow-state {
    description
      "Operational state of the individual flow.";

    leaf name {
      type string;
      description
        "An arbitrary name used for the flow tracked by the system. This
        name must be unique for the flows tracked and exported by the target.";
    }

    leaf transmit {
      type boolean;
      description
        "Whether or not the flow is transmitting";
    }

    leaf loss-pct {
      type otg-types:ieeefloat32;
      description
        "The percentage of transmitted packets that were not received by the
        destinations of the flow.";
    }

    leaf out-frame-rate {
      type otg-types:ieeefloat32;
      description
        "The rate, measured in frames per second, at which frames are being
        transmitted for the flow.";
    }

    leaf in-frame-rate {
      type otg-types:ieeefloat32;
      description
        "The rate, measured in frames per second, at which frames are being
        received for the flow.";
    }

    leaf out-rate {
      type otg-types:ieeefloat32;
      description
        "The rate, measured in bits per second, at which the flow is being
        transmitted.";
    }

    leaf in-rate {
      type otg-types:ieeefloat32;
      description
        "The rate, measured in bits per second, at which the flow is being
        received.";
    }
  }

  grouping flow-counters {
    description
      "Counters that correspond to an individual flow.";

    leaf in-octets {
      type otg-types:counter64;
      description
        "The total number of bytes received by the target for the flow.";
    }

    leaf in-pkts {
      type otg-types:counter64;
      description
        "The total number of packets received by the target for the flow.";
    }

    leaf out-octets {
      type otg-types:counter64;
      description
        "The total number of bytes sent by the target for the flow. These
        packets may be generated or forwarded by the target.";
    }

    leaf out-pkts {
      type otg-types:counter64;
      description
        "The total number of packets sent by the target for the flow. These
        packets may be generated or forwarded by the target.";
    }
  }

  grouping tag-metrics {
    description
      "Structural grouping for tag-metrics information";

    container tag-metrics {
      description
        "A list of tag-metrics which represent one or more metric tags (request)
            to enumerate flow metrics and associated enumerated flow metrics (response).
            Each tag-metrics is identified by a name-value-request.";

      list tag-metric {
        key "name-value";

        description
          "A list of enumerated flow metric, based on metric tags in the configuration.
          Each enumerated flow metric is identified by a name-value";

        leaf name-value {
          type leafref {
            path "../state/name-value";
          }
          description
            "Reference to a name-value, acting as
            a key of the tag-metric list.";
        }

        container state {
          description
            "Operational state of the individual metric.";

          leaf name-value {
            type string;
            description
              "Encoded string represents one or more metric tag name and corresponding tag value,
              to identify each enumerated flow.
              Encoding format:
                  tag_name=value&tag_name=value
              Example:
                  ipv4_src=0x11
                  ipv4_src=0x11&vlan_id=0x01
                  ipv4_src=0x12&vlan_id=0x01";
          }

          container counters {
            description
              "Counters that correspond to the enumerated flow metrics associated
              with a name-value as identifier of that enumerated flow.";

            uses flow-counters;
          }
        }
      }
    }
  }

  uses flow-top;
}
