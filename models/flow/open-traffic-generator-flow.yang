module open-traffic-generator-flow {
  yang-version "1";

  namespace "http://github.com/open-traffic-generator/models/yang/models/flow";
  prefix "otg-flow";

  import open-traffic-generator-types {
    prefix "otg-types";
  }

  organization
    "OpenTrafficGenerator working group";

  contact
    "OpenTrafficGenerator working group
     opentrafficgenerator@googlegroups.com";

  description
    "This module defines telemetry that refers to dataplane flows that
    are controlled by an open traffic generator (OTG) whose definition
    is outside of the context of this module.";

  revision 2022-01-21 {
    description "Initial revision.";
    reference "0.1.0";
  }

  grouping flow-top {
    description
      "Top-level structural grouping for flow entries.";

    container flows {
      description
        "Flow statistics collected by the network device.
        A flow is defined to be an arbitrary stream of packets whose
        definition is outside of the context of the module.";

      list flow {
        key "name metric-group";

        config false;

        description
          "A flow of packets between one or more internal and external sources
          and one or more internal and external destinations that the target
          is able to track and report statistics on. Each flow is identified by
          an arbitrary string identifier.";


        leaf name {
          type leafref {
            path "../state/name";
          }
          description
            "Reference to the flow's name, acting as a key of the
            flow list.";
        }

        leaf metric-group {
          type leafref {
            path "../state/metric-group";
          }
          description
            "Reference to the flow's metric groups if any, acting as
            a key of the flow list.
            Example:
            An OTG flow configuration can contain multiple
            ingress and/or egress metric-group names.
            The metric-group names are used by an OTG implementation
            to enumerate flow metrics.
            flow.packet.header.ipv4.src.metric-group.name = ipv4-src
            flow.packet.header.ipv4.dst.metric-group.name = ipv4-dst
            flow.metric-groups.egress.packet.ipv4.protocol.name = ipv4-prot

            /flows/flow[name=f1,metric-group=ipv4-src,ipv4-dst,ipv4-prot]
            ";
        }

        container state {
          config false;

          description
            "Operational state of the individual flow.";

          uses flow-state;

          container counters {
            description
              "Counters that correspond to the individual flow.";

            uses flow-counters;
          }
        }

        container enumerations {
          config false;

          description
            "Operational state of an enumerated flow.";

          uses flow-enumeration;
        }
      }
    }
  }

  grouping flow-state {
    description
      "Operational state of the individual flow.";

    leaf name {
      type string;
      description
        "An arbitary name used for the flow tracked by the system. This
        name must be unique for the flows tracked and exported by the target.";
    }

    leaf metric-group {
      type string;
      description
        "Any metric groups and filters";
    }

    leaf loss-pct {
      type otg-types:ieeefloat32;
      description
        "The percentage of transmitted packets that were not received by the
        destinations of the flow.";
    }

    leaf out-frame-rate {
      type otg-types:ieeefloat32;
      description
        "The rate, measured in frames per second, at which frames are being
        transmitted for the flow.";
    }

    leaf in-frame-rate {
      type otg-types:ieeefloat32;
      description
        "The rate, measured in frames per second, at which frames are being
        received for the flow.";
    }

    leaf out-rate {
      type otg-types:ieeefloat32;
      description
        "The rate, measured in bits per second, at which the flow is being
        transmitted.";
    }

    leaf in-rate {
      type otg-types:ieeefloat32;
      description
        "The rate, measured in bits per second, at which the flow is being
        received.";
    }
  }

  grouping flow-counters {
    description
      "Counters that correspond to an individual flow.";

    leaf in-octets {
      type otg-types:counter64;
      description
        "The total number of bytes received by the target for the flow.";
    }

    leaf in-pkts {
      type otg-types:counter64;
      description
        "The total number of packets received by the target for the flow.";
    }

    leaf out-octets {
      type otg-types:counter64;
      description
        "The total number of bytes sent by the target for the flow. These
        packets may be generated or forwarded by the target.";
    }

    leaf out-pkts {
      type otg-types:counter64;
      description
        "The total number of packets sent by the target for the flow. These
        packets may be generated or forwarded by the target.";
    }
  }

  grouping flow-enumeration {
    description
      "tbd";

    list enumeration {
      key "name";

      config false;

      description
        "A flow of packets between one or more internal and external sources
        and one or more internal and external destinations that the target
        is able to track and report statistics on. Each flow is identified by
        an arbitrary string identifier.";


      leaf name {
        type leafref {
          path "../state/name";
        }
        description
          "Reference to the flow's name, acting as a key of the flow list.";
      }

      container state {
        config false;

        description
          "Operational state of the individual flow.";

        uses flow-state;

        container counters {
          description
            "Counters that correspond to the individual flow.";

          uses flow-counters;
        }
      }
    }
  }

  uses flow-top;
}
